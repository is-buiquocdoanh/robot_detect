#!/usr/bin/env python3
import rclpy
from rclpy.node import Node
from geometry_msgs.msg import Twist
from yolov8_msgs.msg import HumanPositionArray


class FollowHuman(Node):
    def __init__(self):
        super().__init__('follow_human')

        self.subscription = self.create_subscription(
            HumanPositionArray,
            '/human_positions',
            self.human_callback,
            10
        )
        self.cmd_pub = self.create_publisher(Twist, '/cmd_vel', 10)

        # Tham s·ªë ƒëi·ªÅu khi·ªÉn
        self.target_area = 0.15  # k√≠ch th∆∞·ªõc box m·ª•c ti√™u (khi ƒë·∫øn ƒë·ªß g·∫ßn, c√†ng nh·ªè robot c√†ng ƒë·ª©ng xa)
        self.center_x = 320.0    # center c·ªßa ·∫£nh (640px)
        self.linear_k = 0.3
        self.angular_k = 0.3
        self.stop_threshold = 0.03  # bi√™n ƒë·ªô nh·ªè -> kh√¥ng dao ƒë·ªông

        self.get_logger().info("üö∂‚Äç‚ôÇÔ∏è Follow Human Node started")

    def human_callback(self, msg: HumanPositionArray):
        twist = Twist()

        if not msg.humans:
            # Kh√¥ng c√≥ ng∆∞·ªùi => robot d·ª´ng
            twist.linear.x = 0.0
            twist.angular.z = 0.0
            self.cmd_pub.publish(twist)
            self.get_logger().info("‚õî No human detected ‚Äî stopping")
            return

        # Ch·ªçn ng∆∞·ªùi g·∫ßn nh·∫•t (ng∆∞·ªùi to nh·∫•t trong ·∫£nh)
        target = max(msg.humans, key=lambda h: h.width * h.height)
        area = (target.width * target.height) / (640 * 480)
        error_x = target.x_center - self.center_x

        # ƒêi·ªÅu khi·ªÉn quay
        if abs(error_x) > 20:  # tr√°nh dao ƒë·ªông nh·ªè
            twist.angular.z = -self.angular_k * error_x
        else:
            twist.angular.z = 0.0

        # ƒêi·ªÅu khi·ªÉn ti·∫øn/l√πi (d·ª±a v√†o k√≠ch th∆∞·ªõc box)
        diff = self.target_area - area
        if abs(diff) > self.stop_threshold:
            twist.linear.x = self.linear_k * diff * 100  # nh√¢n h·ªá s·ªë cho d·ªÖ ch·ªânh
        else:
            twist.linear.x = 0.0  # ·ªïn ƒë·ªãnh ·ªü g·∫ßn ng∆∞·ªùi

        # Gi·ªõi h·∫°n t·ªëc ƒë·ªô
        twist.linear.x = max(min(twist.linear.x, 0.3), -0.3)
        twist.angular.z = max(min(twist.angular.z, 0.6), -0.6)

        self.cmd_pub.publish(twist)
        self.get_logger().info(
            f"üéØ Tracking human: area={area:.3f}, err_x={error_x:.1f}, v={twist.linear.x:.2f}, w={twist.angular.z:.2f}"
        )


def main(args=None):
    rclpy.init(args=args)
    node = FollowHuman()
    rclpy.spin(node)
    node.destroy_node()
    rclpy.shutdown()


if __name__ == '__main__':
    main()
